/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator;

import com.google.common.collect.Iterables;
import com.google.common.collect.Iterators;
import dk.sdu.mmmi.mdsd.math.Binding;
import dk.sdu.mmmi.mdsd.math.Div;
import dk.sdu.mmmi.mdsd.math.DomainModel;
import dk.sdu.mmmi.mdsd.math.Expression;
import dk.sdu.mmmi.mdsd.math.External;
import dk.sdu.mmmi.mdsd.math.ExternalBinding;
import dk.sdu.mmmi.mdsd.math.LetBinding;
import dk.sdu.mmmi.mdsd.math.MathExp;
import dk.sdu.mmmi.mdsd.math.MathNumber;
import dk.sdu.mmmi.mdsd.math.Minus;
import dk.sdu.mmmi.mdsd.math.Mult;
import dk.sdu.mmmi.mdsd.math.Parenthesis;
import dk.sdu.mmmi.mdsd.math.Plus;
import dk.sdu.mmmi.mdsd.math.VarBinding;
import dk.sdu.mmmi.mdsd.math.VariableUse;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.BasicEMap;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.EMap;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathGenerator extends AbstractGenerator {
  private static EMap<String, String> variables;
  
  private static List<String> ifparams;
  
  private static EList<String> ifmap;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    ArrayList<String> _arrayList = new ArrayList<String>();
    MathGenerator.ifparams = _arrayList;
    MathGenerator.ifparams.add("n");
    MathGenerator.ifparams.add("m");
    MathGenerator.ifparams.add("j");
    final MathExp math = Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class).next();
    MathGenerator.parse(math);
    Iterable<DomainModel> _filter = Iterables.<DomainModel>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), DomainModel.class);
    for (final DomainModel e : _filter) {
      String _name = e.getElement().getName();
      String _plus = (_name + ".java");
      fsa.generateFile(_plus, 
        this.compile(e));
    }
  }
  
  private CharSequence compile(final DomainModel model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package math_expression;");
    _builder.newLine();
    _builder.append("public class ");
    String _name = model.getElement().getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<VarBinding> _variables = model.getElement().getMath().getVariables();
      for(final VarBinding variable : _variables) {
        _builder.append("\t");
        _builder.append("public int ");
        String _name_1 = variable.getName();
        _builder.append(_name_1, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      boolean _isEmpty = model.getElement().getExternals().isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        _builder.append("\t");
        _builder.append("private External external;");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public ");
        String _name_2 = model.getElement().getName();
        _builder.append(_name_2, "\t");
        _builder.append("(External external){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("this.external = external;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void compute() {");
    _builder.newLine();
    {
      for(final Map.Entry<String, String> variable_1 : MathGenerator.variables) {
        _builder.append("\t\t");
        String _key = variable_1.getKey();
        _builder.append(_key, "\t\t");
        _builder.append(" = ");
        String _value = variable_1.getValue();
        _builder.append(_value, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      boolean _isEmpty_1 = model.getElement().getExternals().isEmpty();
      boolean _not_1 = (!_isEmpty_1);
      if (_not_1) {
        _builder.append("\t");
        _builder.append("public interface External {");
        _builder.newLine();
        {
          EList<External> _externals = model.getElement().getExternals();
          for(final External external : _externals) {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("public int ");
            String _name_3 = external.getName();
            _builder.append(_name_3, "\t\t");
            _builder.append("(");
            {
              EList<String> _serveParams = this.serveParams(external.getParameters());
              for(final String parameter : _serveParams) {
                _builder.append(parameter, "\t\t");
              }
            }
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public EList<String> serveParams(final EList<String> list) {
    BasicEList<String> _basicEList = new BasicEList<String>();
    MathGenerator.ifmap = _basicEList;
    for (final String type : list) {
      {
        final String[] splitted = type.split(",");
        final Iterator<String> iterator = ((List<String>)Conversions.doWrapArray(splitted)).iterator();
        while (iterator.hasNext()) {
          {
            final String finalType = iterator.next();
            boolean _hasNext = iterator.hasNext();
            boolean _not = (!_hasNext);
            if (_not) {
              String _get = MathGenerator.ifparams.get(0);
              String _plus = ((finalType + " ") + _get);
              MathGenerator.ifmap.add(_plus);
              MathGenerator.ifparams.remove(0);
            } else {
              String _get_1 = MathGenerator.ifparams.get(0);
              String _plus_1 = ((finalType + " ") + _get_1);
              String _plus_2 = (_plus_1 + ",");
              MathGenerator.ifmap.add(_plus_2);
              MathGenerator.ifparams.remove(0);
            }
          }
        }
      }
    }
    return MathGenerator.ifmap;
  }
  
  public void displayPanel(final EMap<String, String> result) {
    String resultString = "";
    Set<Map.Entry<String, String>> _entrySet = result.entrySet();
    for (final Map.Entry<String, String> entry : _entrySet) {
      String _resultString = resultString;
      String _key = entry.getKey();
      String _plus = ("var " + _key);
      String _plus_1 = (_plus + " = ");
      String _value = entry.getValue();
      String _plus_2 = (_plus_1 + _value);
      String _plus_3 = (_plus_2 + "\n");
      resultString = (_resultString + _plus_3);
    }
    JOptionPane.showMessageDialog(null, resultString, "Math Language", JOptionPane.INFORMATION_MESSAGE);
  }
  
  public static EMap<String, String> parse(final MathExp math) {
    EMap<String, String> _xblockexpression = null;
    {
      BasicEMap<String, String> _basicEMap = new BasicEMap<String, String>();
      MathGenerator.variables = _basicEMap;
      EList<VarBinding> _variables = math.getVariables();
      for (final VarBinding varBinding : _variables) {
        MathGenerator.computeExpression(varBinding);
      }
      _xblockexpression = MathGenerator.variables;
    }
    return _xblockexpression;
  }
  
  protected static String _computeExpression(final VarBinding binding) {
    MathGenerator.variables.put(binding.getName(), MathGenerator.computeExpression(binding.getExpression()));
    return MathGenerator.variables.get(binding.getName());
  }
  
  protected static String _computeExpression(final ExternalBinding binding) {
    String _xblockexpression = null;
    {
      String parameterList = "";
      final Iterator<Expression> iterator = binding.getParameters().iterator();
      while (iterator.hasNext()) {
        {
          final Expression parameter = iterator.next();
          boolean _hasNext = iterator.hasNext();
          boolean _not = (!_hasNext);
          if (_not) {
            String _parameterList = parameterList;
            String _computeExpression = MathGenerator.computeExpression(parameter);
            parameterList = (_parameterList + _computeExpression);
          } else {
            String _parameterList_1 = parameterList;
            String _computeExpression_1 = MathGenerator.computeExpression(parameter);
            String _plus = (_computeExpression_1 + ",");
            parameterList = (_parameterList_1 + _plus);
          }
        }
      }
      String _name = binding.getRef().getName();
      String _plus = ("this.external." + _name);
      String _plus_1 = (_plus + "(");
      String _plus_2 = (_plus_1 + parameterList);
      _xblockexpression = (_plus_2 + ")");
    }
    return _xblockexpression;
  }
  
  protected static String _computeExpression(final MathNumber exp) {
    return Integer.valueOf(exp.getValue()).toString();
  }
  
  protected static String _computeExpression(final Parenthesis exp) {
    String _computeExpression = MathGenerator.computeExpression(exp.getExp());
    String _plus = ("(" + _computeExpression);
    return (_plus + ")");
  }
  
  protected static String _computeExpression(final Plus exp) {
    String _computeExpression = MathGenerator.computeExpression(exp.getLeft());
    String _plus = (_computeExpression + " + ");
    String _computeExpression_1 = MathGenerator.computeExpression(exp.getRight());
    return (_plus + _computeExpression_1);
  }
  
  protected static String _computeExpression(final Minus exp) {
    String _computeExpression = MathGenerator.computeExpression(exp.getLeft());
    String _plus = (_computeExpression + " - ");
    String _computeExpression_1 = MathGenerator.computeExpression(exp.getRight());
    return (_plus + _computeExpression_1);
  }
  
  protected static String _computeExpression(final Mult exp) {
    String _computeExpression = MathGenerator.computeExpression(exp.getLeft());
    String _plus = (_computeExpression + " * ");
    String _computeExpression_1 = MathGenerator.computeExpression(exp.getRight());
    return (_plus + _computeExpression_1);
  }
  
  protected static String _computeExpression(final Div exp) {
    String _computeExpression = MathGenerator.computeExpression(exp.getLeft());
    String _plus = (_computeExpression + " / ");
    String _computeExpression_1 = MathGenerator.computeExpression(exp.getRight());
    return (_plus + _computeExpression_1);
  }
  
  protected static String _computeExpression(final LetBinding exp) {
    return MathGenerator.computeExpression(exp.getBody());
  }
  
  protected static String _computeExpression(final VariableUse exp) {
    return MathGenerator.computeBinding(exp.getRef());
  }
  
  protected static String _computeBinding(final VarBinding binding) {
    String _xblockexpression = null;
    {
      boolean _containsKey = MathGenerator.variables.containsKey(binding.getName());
      boolean _not = (!_containsKey);
      if (_not) {
        MathGenerator.computeExpression(binding);
      }
      _xblockexpression = binding.getName();
    }
    return _xblockexpression;
  }
  
  protected static String _computeBinding(final LetBinding binding) {
    String _computeExpression = MathGenerator.computeExpression(binding.getBinding());
    String _plus = ("(" + _computeExpression);
    return (_plus + ")");
  }
  
  public static String computeExpression(final EObject exp) {
    if (exp instanceof Div) {
      return _computeExpression((Div)exp);
    } else if (exp instanceof ExternalBinding) {
      return _computeExpression((ExternalBinding)exp);
    } else if (exp instanceof LetBinding) {
      return _computeExpression((LetBinding)exp);
    } else if (exp instanceof MathNumber) {
      return _computeExpression((MathNumber)exp);
    } else if (exp instanceof Minus) {
      return _computeExpression((Minus)exp);
    } else if (exp instanceof Mult) {
      return _computeExpression((Mult)exp);
    } else if (exp instanceof Parenthesis) {
      return _computeExpression((Parenthesis)exp);
    } else if (exp instanceof Plus) {
      return _computeExpression((Plus)exp);
    } else if (exp instanceof VarBinding) {
      return _computeExpression((VarBinding)exp);
    } else if (exp instanceof VariableUse) {
      return _computeExpression((VariableUse)exp);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(exp).toString());
    }
  }
  
  public static String computeBinding(final Binding binding) {
    if (binding instanceof LetBinding) {
      return _computeBinding((LetBinding)binding);
    } else if (binding instanceof VarBinding) {
      return _computeBinding((VarBinding)binding);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(binding).toString());
    }
  }
}
